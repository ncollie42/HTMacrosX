// Code generated by templ@v0.2.364 DO NOT EDIT.

package view

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
	db "myapp/DB"
	"time"
)

const calories_color = "d81b60"
const fat_color = "fdd835"
const carb_color = "7cb342"
const fiber_color = "00acc1"
const protein_color = "3949ab"

func DayOverview(date time.Time, total db.Macro, target db.Macro) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<nav class=\"container-fluid\"><a hx-boost=\"true\" href=\"")
		if err != nil {
			return err
		}
		var var_2 templ.SafeURL = templ.SafeURL(fmt.Sprint("/", date.Add(-time.Hour*24).Unix()))
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_2)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><strong>")
		if err != nil {
			return err
		}
		var_3 := `Prev`
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</strong></a><a hx-boost=\"true\" href=\"/\"><strong>")
		if err != nil {
			return err
		}
		var_4 := `Today`
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</strong></a><a hx-boost=\"true\" href=\"")
		if err != nil {
			return err
		}
		var var_5 templ.SafeURL = templ.SafeURL(fmt.Sprint("/", date.Add(time.Hour*24).Unix()))
		_, err = templBuffer.WriteString(templ.EscapeString(string(var_5)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"><strong>")
		if err != nil {
			return err
		}
		var_6 := `Next`
		_, err = templBuffer.WriteString(var_6)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</strong></a></nav><table><thead><tr><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_7 := `Macro `
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_8 := `Used `
		_, err = templBuffer.WriteString(var_8)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_9 := `Leftover`
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_10 := `Progress `
		_, err = templBuffer.WriteString(var_10)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th></tr></thead><tbody>")
		if err != nil {
			return err
		}
		err = overview("Calories", total.Calories, target.Calories, calories_color).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = overview("Fat", total.Fat, target.Fat, fat_color).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = overview("Carb", total.Carb, target.Carb, carb_color).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		err = overview("Protein", total.Protein, target.Protein, protein_color).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</tbody></table>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func overview(name string, total float32, target float32, color string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_11 := templ.GetChildren(ctx)
		if var_11 == nil {
			var_11 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<tr><th scope=\"row\">")
		if err != nil {
			return err
		}
		var var_12 string = name
		_, err = templBuffer.WriteString(templ.EscapeString(var_12))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><td>")
		if err != nil {
			return err
		}
		var var_13 string = fmt.Sprintf("%.1f", total)
		_, err = templBuffer.WriteString(templ.EscapeString(var_13))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_14 := `/ `
		_, err = templBuffer.WriteString(var_14)
		if err != nil {
			return err
		}
		var var_15 string = fmt.Sprintf("%.1f", target)
		_, err = templBuffer.WriteString(templ.EscapeString(var_15))
		if err != nil {
			return err
		}
		var_16 := `Kcal`
		_, err = templBuffer.WriteString(var_16)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</td><td>")
		if err != nil {
			return err
		}
		var var_17 string = fmt.Sprintf("%.1f", target-total)
		_, err = templBuffer.WriteString(templ.EscapeString(var_17))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(" ")
		if err != nil {
			return err
		}
		var_18 := `left`
		_, err = templBuffer.WriteString(var_18)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</td><td>")
		if err != nil {
			return err
		}
		var var_19 = []any{"progress", ProgressCssColor(color)}
		err = templ.RenderCSSItems(ctx, templBuffer, var_19...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<progress class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_19).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" value=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprint(total / target * 100)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" max=\"100\"></progress></td></tr>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func DayQuickview(macros []db.MacroOverview) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_20 := templ.GetChildren(ctx)
		if var_20 == nil {
			var_20 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<table><thead><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_21 := `Meal `
		_, err = templBuffer.WriteString(var_21)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_22 := `Calories`
		_, err = templBuffer.WriteString(var_22)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_23 := `Fat`
		_, err = templBuffer.WriteString(var_23)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_24 := `Carb`
		_, err = templBuffer.WriteString(var_24)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_25 := `Fiber`
		_, err = templBuffer.WriteString(var_25)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_26 := `Protein`
		_, err = templBuffer.WriteString(var_26)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_27 := `Edit`
		_, err = templBuffer.WriteString(var_27)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th></thead><tbody>")
		if err != nil {
			return err
		}
		for _, m := range macros {
			_, err = templBuffer.WriteString("<tr><th scope=\"row\">")
			if err != nil {
				return err
			}
			var var_28 string = m.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_28))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th><td>")
			if err != nil {
				return err
			}
			var var_29 string = fmt.Sprintf("%.1f", m.Macros.Calories)
			_, err = templBuffer.WriteString(templ.EscapeString(var_29))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td><td>")
			if err != nil {
				return err
			}
			var var_30 string = fmt.Sprintf("%.1f", m.Macros.Fat)
			_, err = templBuffer.WriteString(templ.EscapeString(var_30))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td><td>")
			if err != nil {
				return err
			}
			var var_31 string = fmt.Sprintf("%.1f", m.Macros.Carb)
			_, err = templBuffer.WriteString(templ.EscapeString(var_31))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td><td>")
			if err != nil {
				return err
			}
			var var_32 string = fmt.Sprintf("%.1f", m.Macros.Fiber)
			_, err = templBuffer.WriteString(templ.EscapeString(var_32))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td><td>")
			if err != nil {
				return err
			}
			var var_33 string = fmt.Sprintf("%.1f", m.Macros.Protein)
			_, err = templBuffer.WriteString(templ.EscapeString(var_33))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td><td><a hx-boost=\"true\" href=\"")
			if err != nil {
				return err
			}
			var var_34 templ.SafeURL = templ.SafeURL(fmt.Sprint("/meal/", m.ID))
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_34)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" role=\"button\">")
			if err != nil {
				return err
			}
			var_35 := `EDIT`
			_, err = templBuffer.WriteString(var_35)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></td></tr>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</tbody></table><nav><button hx-get=\"template\" hx-target=\"closest body\" hx-push-url=\"true\">")
		if err != nil {
			return err
		}
		var_36 := `Template `
		_, err = templBuffer.WriteString(var_36)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button><button hx-post=\"meal\">")
		if err != nil {
			return err
		}
		var_37 := `Quick Add `
		_, err = templBuffer.WriteString(var_37)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></nav>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func DayQuickview2(macros []db.MacroOverview) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_38 := templ.GetChildren(ctx)
		if var_38 == nil {
			var_38 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<p><b>")
		if err != nil {
			return err
		}
		var_39 := `Quick View: `
		_, err = templBuffer.WriteString(var_39)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</b></p>")
		if err != nil {
			return err
		}
		for _, m := range macros {
			err = button3(m).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("<nav><button hx-get=\"template\" hx-target=\"closest body\" hx-push-url=\"true\">")
		if err != nil {
			return err
		}
		var_40 := `Template `
		_, err = templBuffer.WriteString(var_40)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button><button hx-post=\"meal\">")
		if err != nil {
			return err
		}
		var_41 := `Quick Add `
		_, err = templBuffer.WriteString(var_41)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button></nav>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

// ----------------------------------------------- TESTING BUTTON LAYOUT----------------------

func button1(m db.MacroOverview) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_42 := templ.GetChildren(ctx)
		if var_42 == nil {
			var_42 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<button class=\"outline\" hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprint("/meal/", m.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"closest body\" hx-push-url=\"true\"><article><header>")
		if err != nil {
			return err
		}
		var var_43 string = m.Name
		_, err = templBuffer.WriteString(templ.EscapeString(var_43))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</header><nav><ul><li>")
		if err != nil {
			return err
		}
		var var_44 string = fmt.Sprintf("%.1f", m.Macros.Calories)
		_, err = templBuffer.WriteString(templ.EscapeString(var_44))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li></ul><li>")
		if err != nil {
			return err
		}
		var var_45 string = fmt.Sprintf("%.1f", m.Macros.Fat)
		_, err = templBuffer.WriteString(templ.EscapeString(var_45))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li><ul><li>")
		if err != nil {
			return err
		}
		var var_46 string = fmt.Sprintf("%.1f", m.Macros.Carb)
		_, err = templBuffer.WriteString(templ.EscapeString(var_46))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li></ul><li>")
		if err != nil {
			return err
		}
		var var_47 string = fmt.Sprintf("%.1f", m.Macros.Fiber)
		_, err = templBuffer.WriteString(templ.EscapeString(var_47))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li><ul><li>")
		if err != nil {
			return err
		}
		var var_48 string = fmt.Sprintf("%.1f", m.Macros.Protein)
		_, err = templBuffer.WriteString(templ.EscapeString(var_48))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li></ul></nav><nav>")
		if err != nil {
			return err
		}
		var var_49 = []any{ProgressCssColor(fat_color),
			ProgressCssFlexPercent(int(m.Macros.Fat * 9 / m.Macros.Calories * 100))}
		err = templ.RenderCSSItems(ctx, templBuffer, var_49...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<progress value=\"100\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_49).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></progress>")
		if err != nil {
			return err
		}
		var var_50 = []any{ProgressCssColor(carb_color),
			ProgressCssFlexPercent(int(m.Macros.Carb * 4 / m.Macros.Calories * 100))}
		err = templ.RenderCSSItems(ctx, templBuffer, var_50...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<progress value=\"100\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_50).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></progress>")
		if err != nil {
			return err
		}
		var var_51 = []any{ProgressCssColor(protein_color),
			ProgressCssFlexPercent(int(m.Macros.Protein * 4 / m.Macros.Calories * 100))}
		err = templ.RenderCSSItems(ctx, templBuffer, var_51...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<progress value=\"100\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_51).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></progress></nav></article></button>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func button2(m db.MacroOverview) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_52 := templ.GetChildren(ctx)
		if var_52 == nil {
			var_52 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<article><header>")
		if err != nil {
			return err
		}
		var var_53 string = m.Name
		_, err = templBuffer.WriteString(templ.EscapeString(var_53))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</header><button class=\"outline\"><nav><ul><li>")
		if err != nil {
			return err
		}
		var var_54 string = fmt.Sprintf("%.1f", m.Macros.Calories)
		_, err = templBuffer.WriteString(templ.EscapeString(var_54))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li></ul><li>")
		if err != nil {
			return err
		}
		var var_55 string = fmt.Sprintf("%.1f", m.Macros.Fat)
		_, err = templBuffer.WriteString(templ.EscapeString(var_55))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li><ul><li>")
		if err != nil {
			return err
		}
		var var_56 string = fmt.Sprintf("%.1f", m.Macros.Carb)
		_, err = templBuffer.WriteString(templ.EscapeString(var_56))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li></ul><li>")
		if err != nil {
			return err
		}
		var var_57 string = fmt.Sprintf("%.1f", m.Macros.Fiber)
		_, err = templBuffer.WriteString(templ.EscapeString(var_57))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li><ul><li>")
		if err != nil {
			return err
		}
		var var_58 string = fmt.Sprintf("%.1f", m.Macros.Protein)
		_, err = templBuffer.WriteString(templ.EscapeString(var_58))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li></ul></nav><div style=\"display : flex\"><progress value=\"100\"></progress><progress value=\"100\"></progress><progress value=\"100\"></progress></div></button></article>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func button3(m db.MacroOverview) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_59 := templ.GetChildren(ctx)
		if var_59 == nil {
			var_59 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<button class=\"outline\" hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprint("/meal/", m.ID)))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"closest body\" hx-push-url=\"true\"><strong>")
		if err != nil {
			return err
		}
		var var_60 string = m.Name
		_, err = templBuffer.WriteString(templ.EscapeString(var_60))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</strong><nav><ul><li>")
		if err != nil {
			return err
		}
		var var_61 string = fmt.Sprintf("%.1f", m.Macros.Calories)
		_, err = templBuffer.WriteString(templ.EscapeString(var_61))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li></ul><li>")
		if err != nil {
			return err
		}
		var var_62 string = fmt.Sprintf("%.1f", m.Macros.Fat)
		_, err = templBuffer.WriteString(templ.EscapeString(var_62))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li><ul><li>")
		if err != nil {
			return err
		}
		var var_63 string = fmt.Sprintf("%.1f", m.Macros.Carb)
		_, err = templBuffer.WriteString(templ.EscapeString(var_63))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li></ul><li>")
		if err != nil {
			return err
		}
		var var_64 string = fmt.Sprintf("%.1f", m.Macros.Fiber)
		_, err = templBuffer.WriteString(templ.EscapeString(var_64))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li><ul><li>")
		if err != nil {
			return err
		}
		var var_65 string = fmt.Sprintf("%.1f", m.Macros.Protein)
		_, err = templBuffer.WriteString(templ.EscapeString(var_65))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</li></ul></nav><section style=\"display : flex\">")
		if err != nil {
			return err
		}
		var var_66 = []any{ProgressCssColor(fat_color),
			ProgressCssFlexPercent(int(m.Macros.Fat * 9 / m.Macros.Calories * 100))}
		err = templ.RenderCSSItems(ctx, templBuffer, var_66...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<progress value=\"100\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_66).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></progress>")
		if err != nil {
			return err
		}
		var var_67 = []any{ProgressCssColor(carb_color),
			ProgressCssFlexPercent(int(m.Macros.Carb * 4 / m.Macros.Calories * 100))}
		err = templ.RenderCSSItems(ctx, templBuffer, var_67...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<progress value=\"100\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_67).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></progress>")
		if err != nil {
			return err
		}
		var var_68 = []any{ProgressCssColor(protein_color),
			ProgressCssFlexPercent(int(m.Macros.Protein * 4 / m.Macros.Calories * 100))}
		err = templ.RenderCSSItems(ctx, templBuffer, var_68...)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("<progress value=\"100\" class=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(templ.CSSClasses(var_68).String()))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\"></progress></section></button>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
