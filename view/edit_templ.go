// Code generated by templ@v0.2.364 DO NOT EDIT.

package view

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import "context"
import "io"
import "bytes"

import (
	"fmt"
	db "myapp/DB"
)

func NameEdit(name string, ID string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_1 := templ.GetChildren(ctx)
		if var_1 == nil {
			var_1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<input type=\"text\" placeholder=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(name))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" name=\"name\" hx-trigger=\"keyup changed delay:500ms\" hx-put=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprint(ID, "/name")))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\">")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func MealEdit(meal db.Meal) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_2 := templ.GetChildren(ctx)
		if var_2 == nil {
			var_2 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<th><button hx-delete=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprint(meal.ID, "/delete")))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" class=\"outline\"><strong>")
		if err != nil {
			return err
		}
		var_3 := `Delete all`
		_, err = templBuffer.WriteString(var_3)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</strong></button></th><div class=\"grid\">")
		if err != nil {
			return err
		}
		err = NameEdit(meal.Name, meal.ID).Render(ctx, templBuffer)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</div><figure><table><thread><tr><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_4 := `Delete `
		_, err = templBuffer.WriteString(var_4)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_5 := `Name `
		_, err = templBuffer.WriteString(var_5)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_6 := `Calories `
		_, err = templBuffer.WriteString(var_6)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_7 := `Protein `
		_, err = templBuffer.WriteString(var_7)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_8 := `Fat `
		_, err = templBuffer.WriteString(var_8)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_9 := `Carb`
		_, err = templBuffer.WriteString(var_9)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_10 := `Grams`
		_, err = templBuffer.WriteString(var_10)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th></tr></thread><tbody id=\"target\">")
		if err != nil {
			return err
		}
		for _, food := range meal.Foods {
			err = GramEdit(food).Render(ctx, templBuffer)
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</tbody></table></figure><button hx-get=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprint(meal.ID, "/food_search")))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"closest body\" hx-push-url=\"true\">")
		if err != nil {
			return err
		}
		var_11 := `Add Food`
		_, err = templBuffer.WriteString(var_11)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func GramEdit(food db.Join) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_12 := templ.GetChildren(ctx)
		if var_12 == nil {
			var_12 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<tr><th><button hx-delete=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprint(food.JoinID, "/join")))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-target=\"closest tr\" class=\"outline\"><strong>")
		if err != nil {
			return err
		}
		var_13 := `X`
		_, err = templBuffer.WriteString(var_13)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</strong></button></th><th scope=\"row\">")
		if err != nil {
			return err
		}
		var var_14 string = food.Name
		_, err = templBuffer.WriteString(templ.EscapeString(var_14))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th>")
		if err != nil {
			return err
		}
		var var_15 string = fmt.Sprintf("%.1f", food.Macros.Calories)
		_, err = templBuffer.WriteString(templ.EscapeString(var_15))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th>")
		if err != nil {
			return err
		}
		var var_16 string = fmt.Sprintf("%.1f", food.Macros.Protein)
		_, err = templBuffer.WriteString(templ.EscapeString(var_16))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th>")
		if err != nil {
			return err
		}
		var var_17 string = fmt.Sprintf("%.1f", food.Macros.Fat)
		_, err = templBuffer.WriteString(templ.EscapeString(var_17))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th>")
		if err != nil {
			return err
		}
		var var_18 string = fmt.Sprintf("%.1f", food.Macros.Carb)
		_, err = templBuffer.WriteString(templ.EscapeString(var_18))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th><input type=\"text\" placeholder=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprint(food.Grams, "g")))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" name=\"grams\" hx-put=\"")
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprint(food.JoinID, "/join")))
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("\" hx-trigger=\"keyup changed delay:250ms\" hx-target=\"closest tr\" hx-swap=\"outerHTML\"></th></tr>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}

func TemplateOverview(macros []db.MacroOverview, token string) templ.Component {
	return templ.ComponentFunc(func(ctx context.Context, w io.Writer) (err error) {
		templBuffer, templIsBuffer := w.(*bytes.Buffer)
		if !templIsBuffer {
			templBuffer = templ.GetBuffer()
			defer templ.ReleaseBuffer(templBuffer)
		}
		ctx = templ.InitializeContext(ctx)
		var_19 := templ.GetChildren(ctx)
		if var_19 == nil {
			var_19 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		_, err = templBuffer.WriteString("<figure hx-history=\"false\"><table><thead><tr><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_20 := `Select `
		_, err = templBuffer.WriteString(var_20)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_21 := `Meal `
		_, err = templBuffer.WriteString(var_21)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_22 := `Calories`
		_, err = templBuffer.WriteString(var_22)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_23 := `Fat`
		_, err = templBuffer.WriteString(var_23)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_24 := `Carb`
		_, err = templBuffer.WriteString(var_24)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_25 := `Fiber`
		_, err = templBuffer.WriteString(var_25)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_26 := `Protein`
		_, err = templBuffer.WriteString(var_26)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th><th scope=\"col\">")
		if err != nil {
			return err
		}
		var_27 := `Edit`
		_, err = templBuffer.WriteString(var_27)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</th></tr></thead><tbody>")
		if err != nil {
			return err
		}
		for _, m := range macros {
			_, err = templBuffer.WriteString("<tr><td><button hx-post=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprint("/template/", m.ID)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" hx-vals=\"")
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString(templ.EscapeString(fmt.Sprintf(`{"token": "%s"}`, token)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\">")
			if err != nil {
				return err
			}
			var_28 := `Use`
			_, err = templBuffer.WriteString(var_28)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</button></td><th scope=\"row\">")
			if err != nil {
				return err
			}
			var var_29 string = m.Name
			_, err = templBuffer.WriteString(templ.EscapeString(var_29))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</th><td>")
			if err != nil {
				return err
			}
			var var_30 string = fmt.Sprintf("%.1f", m.Macros.Calories)
			_, err = templBuffer.WriteString(templ.EscapeString(var_30))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td><td>")
			if err != nil {
				return err
			}
			var var_31 string = fmt.Sprintf("%.1f", m.Macros.Fat)
			_, err = templBuffer.WriteString(templ.EscapeString(var_31))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td><td>")
			if err != nil {
				return err
			}
			var var_32 string = fmt.Sprintf("%.1f", m.Macros.Carb)
			_, err = templBuffer.WriteString(templ.EscapeString(var_32))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td><td>")
			if err != nil {
				return err
			}
			var var_33 string = fmt.Sprintf("%.1f", m.Macros.Fiber)
			_, err = templBuffer.WriteString(templ.EscapeString(var_33))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td><td>")
			if err != nil {
				return err
			}
			var var_34 string = fmt.Sprintf("%.1f", m.Macros.Protein)
			_, err = templBuffer.WriteString(templ.EscapeString(var_34))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</td><td><a href=\"")
			if err != nil {
				return err
			}
			var var_35 templ.SafeURL = templ.SafeURL(fmt.Sprint("/template/", m.ID))
			_, err = templBuffer.WriteString(templ.EscapeString(string(var_35)))
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("\" role=\"button\">")
			if err != nil {
				return err
			}
			var_36 := `EDIT`
			_, err = templBuffer.WriteString(var_36)
			if err != nil {
				return err
			}
			_, err = templBuffer.WriteString("</a></td></tr>")
			if err != nil {
				return err
			}
		}
		_, err = templBuffer.WriteString("</tbody></table></figure><button hx-post=\"/template\">")
		if err != nil {
			return err
		}
		var_37 := `New template `
		_, err = templBuffer.WriteString(var_37)
		if err != nil {
			return err
		}
		_, err = templBuffer.WriteString("</button>")
		if err != nil {
			return err
		}
		if !templIsBuffer {
			_, err = templBuffer.WriteTo(w)
		}
		return err
	})
}
